{
	"info": {
		"_postman_id": "5a45678a-5a44-4c1d-94af-3a71523342f6",
		"name": "dinuti",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "sign-up",
					"item": [
						{
							"name": "Register Kevin",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f554961-8416-4a27-a7e5-e0691f523668",
										"exec": [
											"if (!(environment.isIntegrationTest)) {",
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"kevin@gmail.com\", \"password\":\"kevin\", \"username\":\"Kevin\", \"firstName\": \"Kevin\", \"lastName\": \"B\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Marlene",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f554961-8416-4a27-a7e5-e0691f523668",
										"exec": [
											"if (!(environment.isIntegrationTest)) {",
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"marly@gmail.com\", \"password\":\"marlene\", \"username\":\"marlene\", \"firstName\": \"marlene\", \"lastName\": \"A\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Mohammed",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3f554961-8416-4a27-a7e5-e0691f523668",
										"exec": [
											"if (!(environment.isIntegrationTest)) {",
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"aqasbi.mohamed@gmail.com\", \"password\":\"simo\", \"username\":\"Mohammed\", \"firstName\": \"Mohammed\", \"lastName\": \"A\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Florian",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f8ba8e8-3c03-4765-a77b-9532f16d3377",
										"exec": [
											"if (!(environment.isIntegrationTest)) {",
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"blayflorian@gmail.com\", \"password\":\"florian\", \"username\":\"florian\", \"firstName\": \"florian\", \"lastName\": \"Blay\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Login Florian and Remember Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"",
											"if(tests['User has \"token\" property']){",
											"    postman.setEnvironmentVariable('token', user.token);",
											"}",
											"",
											"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"blayflorian@gmail.com\", \"password\":\"florian\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users/login",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Marlene and Remember Token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9cf791f-3d68-4cd3-bdc3-0a5e9cba9e69",
										"exec": [
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"",
											"if(tests['User has \"token\" property']){",
											"    postman.setEnvironmentVariable('token', user.token);",
											"}",
											"",
											"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"marly@gmail.com\", \"password\":\"marlene\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users/login",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Mohammed and Remember Token Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c48fbb5-e180-462e-a59e-704d2b6690a5",
										"exec": [
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"",
											"if(tests['User has \"token\" property']){",
											"    postman.setEnvironmentVariable('token', user.token);",
											"}",
											"",
											"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"aqasbi.mohamed@gmail.com\", \"password\":\"simo\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users/login",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Kevin and Remember Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "febc3224-1f07-426d-ae01-e2112e6d8d50",
										"exec": [
											"var responseJSON = JSON.parse(responseBody);",
											"",
											"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
											"",
											"var user = responseJSON.user || {};",
											"",
											"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
											"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
											"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
											"",
											"if(tests['User has \"token\" property']){",
											"    postman.setEnvironmentVariable('token', user.token);",
											"}",
											"",
											"tests['Environment variable \"token\" has been set'] = environment.token === user.token;",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "X-Requested-With",
										"value": "XMLHttpRequest"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\"user\":{\"email\":\"kevin@gmail.com\", \"password\":\"kevin\"}}"
								},
								"url": {
									"raw": "{{apiUrl}}/users/login",
									"host": [
										"{{apiUrl}}"
									],
									"path": [
										"users",
										"login"
									]
								}
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiUrl}}/user",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"user\" property'] = responseJSON.hasOwnProperty('user');",
									"",
									"var user = responseJSON.user || {};",
									"",
									"tests['User has \"email\" property'] = user.hasOwnProperty('email');",
									"tests['User has \"username\" property'] = user.hasOwnProperty('username');",
									"tests['User has \"token\" property'] = user.hasOwnProperty('token');",
									""
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"user\":{\"email\":\"john@jacob.com\"}}"
						},
						"url": {
							"raw": "{{apiUrl}}/user",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (!(environment.isIntegrationTest)) {",
									"var is200Response = responseCode.code === 200;",
									"",
									"tests['Response code is 200 OK'] = is200Response;",
									"",
									"if(is200Response){",
									"    var responseJSON = JSON.parse(responseBody);",
									"",
									"    tests['Response contains \"profile\" property'] = responseJSON.hasOwnProperty('profile');",
									"    ",
									"    var profile = responseJSON.profile || {};",
									"    ",
									"    tests['Profile has \"username\" property'] = profile.hasOwnProperty('username');",
									"    tests['Profile has \"image\" property'] = profile.hasOwnProperty('image');",
									"    tests['Profile has \"following\" property'] = profile.hasOwnProperty('following');",
									"}",
									"}",
									""
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{apiUrl}}/profiles/florian",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"profiles",
								"florian"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "add location",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "669820b1-18f8-449e-86f1-664e07bec704",
								"exec": [
									"var responseJSON = JSON.parse(responseBody);",
									"",
									"tests['Response contains \"article\" property'] = responseJSON.hasOwnProperty('article');",
									"",
									"var article = responseJSON.article || {};",
									"",
									"tests['Article has \"title\" property'] = article.hasOwnProperty('title');",
									"tests['Article has \"slug\" property'] = article.hasOwnProperty('slug');",
									"if(tests['Article has \"slug\" property']){",
									"    postman.setEnvironmentVariable('slug', article.slug);",
									"}",
									"tests['Article has \"body\" property'] = article.hasOwnProperty('body');",
									"tests['Article has \"createdAt\" property'] = article.hasOwnProperty('createdAt');",
									"tests['Article\\'s \"createdAt\" property is an ISO 8601 timestamp'] = new Date(article.createdAt).toISOString() === article.createdAt;",
									"tests['Article has \"updatedAt\" property'] = article.hasOwnProperty('updatedAt');",
									"tests['Article\\'s \"updatedAt\" property is an ISO 8601 timestamp'] = new Date(article.updatedAt).toISOString() === article.updatedAt;",
									"tests['Article has \"description\" property'] = article.hasOwnProperty('description');",
									"tests['Article has \"tagList\" property'] = article.hasOwnProperty('tagList');",
									"tests['Article\\'s \"tagList\" property is an Array'] = Array.isArray(article.tagList);",
									"tests['Article has \"author\" property'] = article.hasOwnProperty('author');",
									"tests['Article has \"favorited\" property'] = article.hasOwnProperty('favorited');",
									"tests['Article has \"favoritesCount\" property'] = article.hasOwnProperty('favoritesCount');",
									"tests['favoritesCount is an integer'] = Number.isInteger(article.favoritesCount);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "X-Requested-With",
								"value": "XMLHttpRequest"
							},
							{
								"key": "Authorization",
								"value": "Token {{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"location\":{\n\t\"floor\": 5,\n\t\"room\": 154\n}}"
						},
						"url": {
							"raw": "{{apiUrl}}/location",
							"host": [
								"{{apiUrl}}"
							],
							"path": [
								"location"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}